# ========================= Tham khảo

Rails Blog In VS Code-Noticed V1: https://medium.com/jungletronics/rails-blog-in-vs-code-noticed-v1-78f67a002f27
Rails Blog In VS Code-Noticed V2: https://medium.com/jungletronics/rails-blog-in-vs-code-noticed-v2-7ab37f9d5cc4


>> rails new Blog

# ============================ tạo controller pages với 2 Action home và about 

>> rails g controller pages home about 

# ============================rails c


Post.destroy_all
rails db:seed

# ============================ rails db

>> rails g migration add_user_to_posts user: belongs_to
rails db:migrate


# ============================ them name cho user

>> rails g migration add_name_to_user name

# ============================ xem views

>> rails g views
>> rails g devise:views

# ============================tao folder controllers for users

>> rails g devise:controller users

# ============================ tạo profile controller in users folder

>> rails g controllers user profile

tạo ra 
=> class UsersController < ApplicationController
  def profile
  end
end


# ============================ them views vao user

>> rails g migration add_views_to_user views:integer  



# ============================ muốn thay đổi cột nào thì gõ (giã sử thay dổi views:integer trong users model)

>> rails g migration change_views_for_user views:integer  
=> sinh ra file migration , trong change mình sẽ config lại , cho default: 0
    def change
        add_column :users, :views, :integer, default: 0
    end
sau đó : rails  db:migrate 


# ============================ thêm model comments và tạo khóa ngoại đến các model khác


>> rails g model comment post:belongs_to user:belongs_to

# ============================ vi du ve cmd tao khoa ngoai

>> rails generate model Comment commenter:string body:text article:references

# ============================ cài Action Text trong Rails 7.... gg for free


# ============================ tạo comments controller

>> rails g controller comments



# ============================ notied (link: https://github.com/excid3/noticed )

bundle add noticed -v 1.5.7
>> rails generate noticed:model
      invoke  active_record
      create    app/models/notification.rb
      invoke    test_unit
      create      test/models/notification_test.rb
      create      test/fixtures/notifications.yml
      insert  app/models/notification.rb
      insert  db/migrate/20240419082636_create_notifications.rb


>> rails g noticed:notification Comment
      create  app/notifications/comment.rb
     
>> rails g noticed:notification CommentNotification
      create  app/notifications/comment_notification.rb

>> rails c 
>> Notification.all


# ============================ gem ransack để search trong rails

document : https://activerecord-hackery.github.io/ransack/getting-started/search-matches/
>> bundle add ransack
>> rails g controller search index


# ============================  Admin Dashboard and Improve Searches

>> rails g migration add_role_to_user role:integer
>> rails g migration remove_body_from_post


# ============================  Admin Dashboard controller

>> rails g controller admin index posts comments user show_post

# ============================  pretty_url_gem_Friendly_id

>> bundle add fiendly_id
>> rails g migration AddSlugToPosts slug:uniq
>> rails g friendly_id

If you're adding FriendlyId to an existing app and need to generate slugs for existing users, 
do this from the console, runner, or add a Rake task:
-> nếu đã có sẳn data trong app rồi thì phải chạy Post.find_each(&:save) để set lại slug cho tất cả các post thì mới xài được
/pots/title-n..
- genarate slugs for posts created before Adding Gem

>> Post.find_each(&:save)

FriendlyId's History module adds the ability to store a log of a model's slug

document: https://www.rubydoc.info/github/norman/friendly_id/FriendlyId/History
đe
đê
đê

